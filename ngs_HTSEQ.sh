#!/bin/bash

# Copyright (c) 2012,2013, Stephen Fisher and Junhyong Kim, University of
# Pennsylvania.  All Rights Reserved.
#
# You may not use this file except in compliance with the Kim Lab License
# located at
#
#     http://kim.bio.upenn.edu/software/LICENSE
#
# Unless required by applicable law or agreed to in writing, this
# software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied.  See the License
# for the specific language governing permissions and limitations
# under the License.

##########################################################################################
# INPUT: $SAMPLE/star/STAR_Unique.bam
# OUTPUT: $SAMPLE/htseq/$SAMPLE.htseq.cnts.txt, $SAMPLE/htseq/$SAMPLE.htseq.log.txt, $SAMPLE/htseq/$SAMPLE.htseq.err.txt
# REQUIRES: HTSeq, runHTSeq.py
##########################################################################################

##########################################################################################
# USAGE
##########################################################################################

ngsUsage_HTSEQ="Usage: `basename $0` htseq OPTIONS sampleID    --  run HTSeq on unique mapped reads\n"

##########################################################################################
# HELP TEXT
##########################################################################################

ngsHelp_HTSEQ="Usage:\n\t`basename $0` htseq [-i inputDir] [-f inputFile] -s species sampleID\n"
ngsHelp_HTSEQ+="Input:\n\tsampleID/inputDir/inputFile\n"
ngsHelp_HTSEQ+="Output:\n\tsampleID/htseq/sampleID.htseq.cnts.txt\n\tsampleID/htseq/sampleID.htseq.log.txt\n\tsampleID/htseq/sampleID.htseq.err.txt\n"
ngsHelp_HTSEQ+="Requires:\n\tHTSeq ( http://www-huber.embl.de/users/anders/HTSeq/ )\n\trunHTSeq.py ( https://github.com/safisher/ngs )\n"
ngsHelp_HTSEQ+="Options:\n"
ngsHelp_HTSEQ+="\t-i inputDir - location of source file (default: star).\n"
ngsHelp_HTSEQ+="\t-f inputFile - source file (default: STAR_Unique.bam).\n"
ngsHelp_HTSEQ+="\t-s species - species from repository: $HTSEQ_REPO.\n"
ngsHelp_HTSEQ+="Run HTSeq using runHTSeq.py script. This requires a BAM file containing unique reads as generated by 'post'.\n"
ngsHelp_HTSEQ+="The following HTSeq parameter values are used: --mode=intersection-nonempty --stranded=no --type=exon --idattr=gene_id\n"
ngsHelp_HTSEQ+="For a description of the HTSeq parameters see http://www-huber.embl.de/users/anders/HTSeq/doc/count.html#count"

##########################################################################################
# LOCAL VARIABLES WITH DEFAULT VALUES. Using the naming convention to
# make sure these variables don't collide with the other modules.
##########################################################################################

ngsLocal_HTSEQ_INP_DIR="star"
ngsLocal_HTSEQ_INP_FILE="STAR_Unique.bam"

##########################################################################################
# PROCESSING COMMAND LINE ARGUMENTS
# HTSEQ args: -s value, -g value, sampleID
##########################################################################################

ngsArgs_HTSEQ() {
	if [ $# -lt 3 ]; then
		printHelp $COMMAND
		exit 0
	fi
	
	# getopts doesn't allow for optional arguments so handle them manually
	while true; do
		case $1 in
			-i) ngsLocal_HTSEQ_INP_DIR=$2
				shift; shift;
				;;
			-f) ngsLocal_HTSEQ_INP_FILE=$2
				shift; shift;
				;;
			-s) SPECIES=$2
				shift; shift;
				;;
			-*) printf "Illegal option: '%s'\n" "$1"
				printHelp $COMMAND
				exit 0
				;;
 			*) break ;;
		esac
	done
	
	SAMPLE=$1
}

##########################################################################################
# RUNNING COMMAND ACTION
# Run HTSeq on uniqely mapped alignments, as generated by the POST command.
##########################################################################################

ngsCmd_HTSEQ() {
	prnCmd "# BEGIN: HTSEQ"
	
	# make relevant directory
	if [ ! -d $SAMPLE/htseq ]; then 
		prnCmd "mkdir $SAMPLE/htseq"
		if ! $DEBUG; then mkdir $SAMPLE/htseq; fi
	fi
	
	# We assume that the alignment file exists
	prnCmd "runHTSeq.py $SAMPLE/$ngsLocal_HTSEQ_INP_DIR/$ngsLocal_HTSEQ_INP_FILE $SAMPLE/htseq/$SAMPLE $HTSEQ_REPO/$SPECIES.gz"
	if ! $DEBUG; then 
		runHTSeq.py $SAMPLE/$ngsLocal_HTSEQ_INP_DIR/$ngsLocal_HTSEQ_INP_FILE $SAMPLE/htseq/$SAMPLE $HTSEQ_REPO/$SPECIES.gz
	fi
	
	# parse output into three files: gene counts ($SAMPLE.htseq.cnts.txt), 
	# warnings ($SAMPLE.htseq.err.txt), log ($SAMPLE.htseq.log.txt)
	prnCmd "# splitting output file into counts, log, and error files"
	prnCmd "grep 'Warning' $SAMPLE/htseq/$SAMPLE.htseq.out > $SAMPLE/htseq/$SAMPLE.htseq.err.txt"
	prnCmd "grep -v 'Warning' $SAMPLE/htseq/$SAMPLE.htseq.out > $SAMPLE/htseq/tmp.txt"
	prnCmd "echo -e 'gene\tcount' > $SAMPLE/htseq/$SAMPLE.htseq.cnts.txt"
	prnCmd "grep -P '\t' $SAMPLE/htseq/tmp.txt | grep -P -v 'no_feature|ambiguous|too_low_aQual|not_aligned|alignment_not_unique' >> $SAMPLE/htseq/$SAMPLE.htseq.cnts.txt"
	prnCmd "grep -P -v '\t' $SAMPLE/htseq/tmp.txt > $SAMPLE/htseq/$SAMPLE.htseq.log.txt"
	prnCmd "grep -P 'no_feature|ambiguous|too_low_aQual|not_aligned|alignment_not_unique' $SAMPLE/htseq/tmp.txt >> $SAMPLE/htseq/$SAMPLE.htseq.log.txt"
	prnCmd "rm $SAMPLE/htseq/$SAMPLE.htseq.out $SAMPLE/htseq/tmp.txt"
	if ! $DEBUG; then 
		grep 'Warning' $SAMPLE/htseq/$SAMPLE.htseq.out > $SAMPLE/htseq/$SAMPLE.htseq.err.txt
		grep -v 'Warning' $SAMPLE/htseq/$SAMPLE.htseq.out > $SAMPLE/htseq/tmp.txt
		echo -e 'gene\tcount' > $SAMPLE/htseq/$SAMPLE.htseq.cnts.txt
		grep -P '\t' $SAMPLE/htseq/tmp.txt | grep -P -v 'no_feature|ambiguous|too_low_aQual|not_aligned|alignment_not_unique' >> $SAMPLE/htseq/$SAMPLE.htseq.cnts.txt
		grep -P -v '\t' $SAMPLE/htseq/tmp.txt > $SAMPLE/htseq/$SAMPLE.htseq.log.txt
		grep -P 'no_feature|ambiguous|too_low_aQual|not_aligned|alignment_not_unique' $SAMPLE/htseq/tmp.txt >> $SAMPLE/htseq/$SAMPLE.htseq.log.txt

		rm $SAMPLE/htseq/$SAMPLE.htseq.out $SAMPLE/htseq/tmp.txt
	fi
	
	prnCmd "# FINISHED: HTSEQ"
}
